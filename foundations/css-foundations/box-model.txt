Everything on a webpage can be visualized as a rectangular box.

Those bxoes consist of (inside -> out):
- content
- padding, space between the content and the border
- border, space between padding and margin
- margin, space between box and other boxes (or replace boxes with elements)

Learn CSS Box Model in 8 minutes

- Use padding to expand the size of the box (padding occurs inside the border)
- Margin is used to space two elements from each other 
- Using height and width property will change the size of the content
- For margins between two elements, the larger margin always prevails. (thye never add on top of each other)
- in the box model, margin actually collapses between two elements that are next to each other 


height = content + padding + border 

to change this to make it accurate -> box-size: border-box 
(the default value is box-size:content-box)
makes the height and width account for the boder and the padding 

so height: 100px -> actually means the whole box is 100px, not the content 
box-sizing: border-box is usually put in the universal selector (css resets)

* {
  margin: 0;
  padding: 0;
  box-sizing: border-box;
}

box-sizing: border-box (EASY!)

if we lets say the box as height of 700px and a width of 300px
then add padding 50px around it and the box-size: border-box,
the content size becomes 600px x 200px (because on the left and right, 50px on each side, 700px-100px = 600px)
(same with height => 300px - 50px (top) - 50px (bottom) = 200px). The padding and the border (if we add it)
will remove from the content.


in box-size: content-box, the padding and border adds to the box 

use box-sizing: border-box because its more accurate, the padding and the border add up to the specified height and width 
padding + border = height/ or width

with box-size: content-box, the height and the width is only of the content (NOT THE BOX), and therefore,
padding + border != height/ or width

padding and border added on top of the content (and does not account for set width and height)


MDN WEB DOCS:
https://developer.mozilla.org/en-US/docs/Learn_web_development/Core/Styling_basics/Box_model#inner_and_outer_display_types

If a box has a display value of block, then:

The box will break onto a new line.
The width and height properties are respected.
Padding, margin and border will cause other elements to be pushed away from the box.
If width is not specified, the box will extend in the inline direction to fill the space available in its container. In most cases, the box will become as wide as its container, filling up 100% of the space available.
Some HTML elements, such as <h1> and <p>, use block as their outer display type by default.
(div p)

If a box has a display type of inline, then:

The box will not break onto a new line.
The width and height properties will not apply.
Top and bottom padding, margins, and borders will apply but will not cause other inline boxes to move away from the box.
Left and right padding, margins, and borders will apply and will cause other inline boxes to move away from the box.
(span, a, em, strong)

block and inline display values are said to be outer display types â€” they affect how the box is laid out in relation to other boxes around it. Boxes also have an inner display type, which dictates how elements inside that box are laid out (like grid and flex). (more on that later)


Box model:
Content box: The area where your content is displayed; size it using properties like width and height.
Padding box: The padding sits around the content as white space; size it using padding and related properties.
Border box: The border box wraps the content and any padding; size it using border and related properties.
Margin box: The margin is the outermost layer, wrapping the content, padding, and border as whitespace between this box and other elements; size it using margin and related properties.


You can use margins make an overlap.
Two positive margins will combine to become one margin. Its size will be equal to the largest individual margin.
Two negative margins will collapse and the smallest (furthest from zero) value will be used.
If one margin is negative, its value will be subtracted from the total.


.box {
    margin: <margin-top> || <margin-right> || <margin-bottom> || <margin-left>
}</margin-left></margin-bottom></margin-right></margin-top>


.container {
  width: 980px;
  margin: 0 auto;
} -> use this for centering