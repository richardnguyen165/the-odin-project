justify-content use to algn main-axis

align-items use to align cross-axis 

gap use to seperate elements or (flex-items)


(if you go beneath a flex-basis and have applied flex-wrap, it "wrap" to the next line)

in flexbox, these are default rules (when applying display: flex)

"The children will be positioned by default according to the following 2 rules:

Going horizontal -> flex-direction: row
Primary axis: Children will be bunched up at the start of the container.
Cross axis: Children will stretch out to fill the entire container."

REMEMBER:
justify-content:
flex-start
flex-end
center
space-between
space-around
space-evenly

align-items:
stretch
flex-start
center
flex-end
baseline

align-self is applied to the child element (a flex-item inside a flex-container)

theres no justify-items 
(think of a kebab, you cant push one child down, and not expcect the other child to be pushed down as well) 
(also the reason why there is no justify-self)

width is not respected in flexbox (things are fluid and flexible can adhust to the constraints of the world)

for example an item of 2000px, can expand further than that (providing the parent has enough space)

in flow layout however, it remains at 2000px (its a hard constraint)


On flex-basis: directly copy and paste
"And so, the Flexbox authors created a generic “size” property called flex-basis. It's like width or height, but pegged to the primary axis, like everything else. It allows us to set the hypothetical size of an element in the primary-axis direction, regardless of whether that's horizontal or vertical.:

(its pretty much a hypothetical size thats not meant to be violated, except when there is not enough parent space or other conditions (do not go underneath it or above it depending on condtions, except due to parent space or other))

flex-grow 


"The default value for flex-grow is 0, which means that growing is opt-in. If we want a child to gobble up any extra space in the container, we need to explicitly tell it so.

What if multiple children set flex-grow? In this case, the extra space is divided proportionally between children based on their flex-grow value."

For example 

A:
flex-grow: 1


B:
flex-grow: 2

B gows 2/3 of space, while A grow 1/3 of space



flex-shrink:


A:
flex-shrink: 1

B: 
flex-shrink: 5

A: 1/6
B: 5/6

B shrinks 5 times faster than A 


(flex-basis can be violated if needed by resizing the window) -> flex-basis acts more like a suggestion

prevent shrinking by flex-shrink: 0

min-width prevents overflow
(also min-height) -> though it can break

margin: auto -> adds extra space to the margin of the element


flex-wrap helps wrap elements around if you need to, but you will need to use align-content as each element becomes its own flex container 
(mean each element is tinkered with, not the entire row if using align-items)

flexbox is used for things like itmes or email queries

Good reference
https://www.joshwcomeau.com/css/interactive-guide-to-flexbox/

